const crypto = require('crypto');
const { getClientAndDB } = require('./database.js')

// length: the amount of bytes to randomly generate
// prefix: if provided, this string will appear before the randomly generated bytes like this, ex. (`{prefix}27ca26fc-190d-44ca-846e-b3e6dd8640a6`)
function generateRandomBytes(length, prefix = null) {
    return new Promise((resolve, reject) => {
        crypto.randomBytes(12, (err, buff) => {
            if (err) {
                reject(err);
            }
            else {
                // if prefix is not null, preface the buffer with the prefix, if it is null, don't add a prefix
                const hexString = prefix !== null ? prefix + buff.toString('hex') : buff.toString('hex');
                resolve(hexString);
            }
        });
    });
}
// Generates a unique channel id
async function generateUCID(dbConnection) {
    const bytes = await generateRandomBytes(12, "channel-");
    const collisionCheck = await dbConnection.collection('channels').findOne({ ucid: bytes });

    if (collisionCheck) {
        return await generateUCID(dbConnection);
    }
    return bytes;
}


// Returns true if email and password match all regex tests, false if one of them fails
function validateEmailPasswordInput(email, password) {
    const testResult = [email, password].reduce((prevVal, currVal) => {
        if (prevVal)
            return [
                ...prevVal,
                // Test length >1
                /.{2,}/.test(currVal),
                // Test if there are no space
                /^[^\s]+$/.test(currVal)
            ]
    }, []);
    
    for (let i = 0; i < testResult.length; i++) {
        if (testResult[i] === false) {
            return false;
        }
    }
    return true;
}

module.exports = {
    generateUCID,
    validateEmailPasswordInput
};